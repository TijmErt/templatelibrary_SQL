# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Testing Application

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest  # Use the official PostgreSQL Docker image
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 'temp'
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 6060:5432  # Expose PostgreSQL port to the host
        options: --health-cmd "pg_isready -U user" --health-timeout 30s --health-start-period 5s --health-retries 5
      
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    # Step 3: Start PostgreSQL database
    - name: Start PostgreSQL
      uses: docker/setup-buildx-action@v2
      
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run tests
      run: mvn clean test

   
    # Step 4: Start application container
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image for Spring app
      run: |
        docker build -t my-spring-app .  # Build the Docker image from the Dockerfile

    - name: Run Spring application Docker container
      run: |
        # Run the Spring application container and link it to the PostgreSQL container
        docker run -d -p 8080:8080 --name spring-app --link ${GITHUB_SHA}_postgres:postgres my-spring-app

    - name: Setup K6
      uses: grafana/setup-k6-action@v1


    - name: Run local k6 test
      uses: grafana/run-k6-action@v1
      env:
        K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
        K6_CLOUD_PROJECT_ID: ${{ secrets.K6_CLOUD_PROJECT_ID }}
      with:
        path: GraphqlK6_script.js
        
        
