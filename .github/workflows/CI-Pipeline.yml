# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Testing Application

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    # Step 3: Start PostgreSQL database
    - name: Start PostgreSQL
      uses: docker/setup-buildx-action@v2
      
    - name: Create Docker network
      run: docker network create my-network
      
    - name: Run PostgreSQL container
      run: |
        docker run -d \
          --name postgres \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD= \
          -p 6060:5432 \
          --network my-network \
          postgres:15

      env:
        POSTGRES_USER: 'postgres'
        POSTGRES_PASSWORD: ''
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run tests
      run: mvn clean test

    - name: Build Docker image
      run: docker build -t my-app:latest .
    # Step 4: Start application container
    - name: Start application container
      id: startApplication
      run: |
        docker run -d \
          --name my-app \
          --network my-network \
          -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:8080/postgres \
          -e SPRING_DATASOURCE_USERNAME=postgres \
          -e SPRING_DATASOURCE_PASSWORD= \
          -p 8080:8080 \
          my-app:latest

    # Step 5: Wait for application readiness
        
    - name: Setup K6
      if: steps..startApplication.outcome == 'success'
      uses: grafana/setup-k6-action@v1


    - name: Run local k6 test
      uses: grafana/run-k6-action@v1
      env:
        K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
        K6_CLOUD_PROJECT_ID: ${{ secrets.K6_CLOUD_PROJECT_ID }}
      with:
        path: GraphqlK6_script.js
        
        
